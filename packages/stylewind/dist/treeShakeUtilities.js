#!/usr/bin/env node
import{R as r,c as e}from"./index.js";import{execSync as t}from"child_process";import o from"fs";import i from"path";import{pathToFileURL as s}from"url";import"node:process";import"node:os";import"node:tty";const n=i.resolve(r,"utilities.js"),c=r=>{let e=[];return(o.readdirSync(r)||[]).filter((r=>!["node_modules","dist"].includes(r))).forEach((t=>{const s=i.join(r,t),n=o.statSync(s);n&&n.isDirectory()?e=e.concat(c(s)):(t.endsWith(".tsx")||t.endsWith(".js"))&&e.push(s)})),e};(async()=>{try{(r=>{if(!o.existsSync(r))throw new Error(`${r} does not exist`);t("npx generate-rn-stylewind")})(n);const r=await(async r=>(await import(s(r).href)).utilities)(n),i=(r=>{const e=new Set,t=/styles\(\[([^\]]*)\]\)/g;return r.forEach((r=>{const i=o.readFileSync(r,"utf8");let s;for(;null!==(s=t.exec(i));)s[1].split(",").map((r=>r.trim().replace(/['"]/g,""))).forEach((r=>e.add(r)))})),e})(c(process.cwd())),l=((r,e)=>{const t={};return e.forEach((e=>{r?.[e]&&(t[e]=r[e])})),t})(r,i);((r,t)=>{o.readFile(r,"utf8",((i,s)=>{if(i)return void console.error("Error reading the file:",i);const n=s.replace(/(var utilities =)[\s\S]*?(;)/,`$1 ${JSON.stringify(t,null,4)}$2`);o.writeFile(r,n,"utf8",(r=>{r?console.error("Error writing updated utilities:",r):console.log(e.greenBright("Theme Tree-Shake Completed!"))}))}))})(n,l)}catch(r){console.error("Error loading generated utilities:",r),process.exit(1)}})();
