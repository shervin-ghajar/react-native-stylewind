"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1035],{6088:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(4344);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},7189:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"theme/customization","title":"Theme customization","description":"The rn-stylewind theme can be customized by modifying theme.config.mjs. You can override colors, spacing, typography, and utilities.","source":"@site/docs/theme/customization.mdx","sourceDirName":"theme","slug":"/theme/customization","permalink":"/react-native-stylewind/docs/theme/customization","draft":false,"unlisted":false,"editUrl":"https://github.com/shervin-ghajar/react-native-stylewind/edit/main/website/docs/theme/customization.mdx","tags":[],"version":"current","frontMatter":{"title":"Theme customization","sidebar_label":"Customization"},"sidebar":"tutorialSidebar","previous":{"title":"Theming"},"next":{"title":"useTheme","permalink":"/react-native-stylewind/docs/theme/useTheme"}}');var s=t(612),o=t(6088);const r={title:"Theme customization",sidebar_label:"Customization"},c=void 0,l={},a=[{value:"Colors",id:"colors",level:2},{value:"Customizing Colors",id:"customizing-colors",level:3},{value:"Spacing",id:"spacing",level:2},{value:"Customizing Spacing",id:"customizing-spacing",level:3},{value:"Typography",id:"typography",level:2},{value:"Customizing Typography",id:"customizing-typography",level:3},{value:"Utilities",id:"utilities",level:2},{value:"Customizing Utilities",id:"customizing-utilities",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"rn-stylewind"})," theme can be customized by modifying ",(0,s.jsx)(n.code,{children:"theme.config.mjs"}),". You can override colors, spacing, typography, and utilities."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," After each customization of the ",(0,s.jsx)(n.code,{children:"theme.config.mjs"})," file, the theme and utilities will be regenerated with no need of rebuilding the React Native app."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"colors",children:"Colors"}),"\n",(0,s.jsx)(n.p,{children:"Colors define the primary, secondary, status, background, text, and grey shades used in the theme."}),"\n",(0,s.jsx)(n.h3,{id:"customizing-colors",children:"Customizing Colors"}),"\n",(0,s.jsxs)(n.p,{children:["To modify colors, update ",(0,s.jsx)(n.code,{children:"theme.config.mjs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createTheme } from 'rn-stylewind';\n\nexport default await createTheme({\n  colors: {\n    primary: {\n      default: '#FF5733',\n      light: '#FF8F66',\n      dark: '#C70039',\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Save the file and restart your application for changes to take effect."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"spacing",children:"Spacing"}),"\n",(0,s.jsx)(n.p,{children:"Spacing controls margin and padding values across the theme."}),"\n",(0,s.jsx)(n.h3,{id:"customizing-spacing",children:"Customizing Spacing"}),"\n",(0,s.jsxs)(n.p,{children:["Update ",(0,s.jsx)(n.code,{children:"theme.config.mjs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { createTheme } from 'rn-stylewind';\n\nexport default await createTheme({\n  spacing: {\n    default: 10,\n    small: 15,\n    large: 30,\n  },\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"typography",children:"Typography"}),"\n",(0,s.jsx)(n.p,{children:"Typography allows you to define custom fonts for your application."}),"\n",(0,s.jsx)(n.h3,{id:"customizing-typography",children:"Customizing Typography"}),"\n",(0,s.jsxs)(n.p,{children:["Modify ",(0,s.jsx)(n.code,{children:"theme.config.mjs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { createTheme } from 'rn-stylewind';\n\nexport default await createTheme({\n  typography: {\n    fontFamily: ['Inter', 'Arial'],\n  },\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"utilities",children:"Utilities"}),"\n",(0,s.jsx)(n.p,{children:"Utilities help define reusable styles for layout, flexbox, and more."}),"\n",(0,s.jsx)(n.h3,{id:"customizing-utilities",children:"Customizing Utilities"}),"\n",(0,s.jsxs)(n.p,{children:["Extend or override utilities in ",(0,s.jsx)(n.code,{children:"theme.config.mjs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { createTheme } from 'rn-stylewind';\n\nexport default await createTheme({\n  utilities: {\n    textCenter: { textAlign: 'center' },\n    roundedFull: { borderRadius: 9999 },\n  },\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, ",(0,s.jsx)(n.code,{children:"textCenter"})," and ",(0,s.jsx)(n.code,{children:"roundedFull"})," can be used throughout your styles."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);